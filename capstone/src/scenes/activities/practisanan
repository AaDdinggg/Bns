import React, { useState } from "react";
import {
  Box,
  Button,
  Typography,
  useTheme,
  Dialog,
  DialogTitle,
  DialogContent,
  Grid,
  DialogActions,
  TextField,
  MenuItem,
} from "@mui/material";
import { tokens } from "../../theme";
import { mockDataActivities } from "../../data/mockData";
import { mockDataBeneficiaries } from "../../data/mockData";
import Header from "../../components/Header";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import ActivitiesForm from "./activitiesForm";
import ActivitiesMonitoring from "./activitiesMonitoring"; // Import the ActivitiesMonitoring component

const ActivityBox = ({ activity, onEdit, onDelete }) => {
  const [viewDialogOpen, setViewDialogOpen] = useState(false);

  const handleViewClick = () => {
    setViewDialogOpen(true);
  };

  const handleCloseViewDialog = () => {
    setViewDialogOpen(false);
  };

  return (
    <Grid item xs={3}>
      <Box
        key={activity.id}
        border={1}
        borderRadius={8}
        padding={3}
        marginY={2}
        display="flex"
        flexDirection="column"
        alignItems="center"
        height={200}
        sx={{ boxShadow: 3 }}
      >
        <Typography variant="h3" fontWeight="bold" sx={{ m: "10px 0 0 0" }}>
          {activity.list}
        </Typography>
        <Typography variant="h4" sx={{ m: "10px 0 0 0" }}>
          {activity.date}
        </Typography>
        <Box marginTop="auto">
          <Button color="primary" onClick={() => onEdit(activity.id)}>
            <EditIcon />
          </Button>
          <Button color="info" onClick={handleViewClick}>
            <VisibilityIcon />
          </Button>
          <Button color="error" onClick={() => onDelete(activity.id)}>
            <DeleteIcon />
          </Button>
        </Box>
      </Box>
      <Dialog open={viewDialogOpen} onClose={handleCloseViewDialog}>
        <DialogTitle sx={{ fontSize: "24px" }}>View Activity</DialogTitle>
        <DialogContent>
          {activity && (
            <Box>
              <Typography variant="h6" sx={{ fontSize: "18px" }}>
                {activity.list}
              </Typography>
              <Typography sx={{ fontSize: "18px" }}>{`Description: ${activity.description}`}</Typography>
              <Typography sx={{ fontSize: "18px" }}>{`Date: ${activity.date}`}</Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseViewDialog} color="primary">
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </Grid>
  );
};

const Activities = () => {
  const theme = useTheme();
  const [viewDialogOpen, setViewDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [selectedRow, setSelectedRow] = useState(null);
  const [openActivitiesForm, setOpenActivitiesForm] = useState(false);
  const [editFormData, setEditFormData] = useState(null);
  const [selectedMonth, setSelectedMonth] = useState("");
  const [selectedYear, setSelectedYear] = useState("");
  const [sortedActivities, setSortedActivities] = useState(mockDataActivities);

  const handleUpdate = (id) => {
    const selectedRow = mockDataActivities.find((row) => row.id === id);
    setEditFormData(selectedRow);
    setEditDialogOpen(true);
  };

  const handleView = (activity) => {
    setSelectedRow(activity);
    setViewDialogOpen(true);
  };

  const handleCloseViewDialog = () => {
    setViewDialogOpen(false);
  };

  const handleDelete = (id) => {
    console.log(`Delete row with ID: ${id}`);
  };

  const handleOpenAddForm = () => {
    setOpenActivitiesForm(true);
  };

  const handleCloseAddForm = () => {
    setOpenActivitiesForm(false);
  };

  const handleAddActivity = (formData) => {
    console.log("Adding new activity:", formData);
    setOpenActivitiesForm(false);
  };

  const handleCloseEditForm = () => {
    setEditDialogOpen(false);
  };

  const handleEditActivity = (formData) => {
    console.log(
      "Editing activity with ID:",
      editFormData.id,
      "Data:",
      formData
    );
    // Perform your update logic here
    setEditDialogOpen(false);
  };

  const handleSortByDate = () => {
    const monthYearString = `${selectedYear}-${selectedMonth}`;
    const sortedByDate = mockDataActivities
      .filter((activity) => {
        const activityDate = new Date(activity.date);
        return (
          activityDate.getMonth() === parseInt(selectedMonth, 10) - 1 &&
          activityDate.getFullYear() === parseInt(selectedYear, 10)
        );
      })
      .sort((a, b) => new Date(a.date) - new Date(b.date));

    setSortedActivities(sortedByDate);
  };

  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const years = ["2022", "2023", "2024", "2025"]; // Add your desired range

  return (
    <>
      <Box m="20px">
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Box>
            <Header title="ACTIVITIES" subtitle="List of Activities" />
          </Box>
          <Box display="flex" alignItems="center">
            <Button variant="contained" color="primary" onClick={handleOpenAddForm}>
              Add Activity
            </Button>
            <TextField
              label="Select Month"
              variant="outlined"
              sx={{ width: '25ch', ml: 2 }}
              select
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(e.target.value)}
            >
              {months.map((month, index) => (
                <MenuItem key={index} value={(index + 1).toString()}>
                  {month}
                </MenuItem>
              ))}
            </TextField>
            <TextField
              label="Select Year"
              variant="outlined"
              sx={{ width: '25ch', ml: 2 }}
              select
              value={selectedYear}
              onChange={(e) => setSelectedYear(e.target.value)}
            >
              {years.map((year) => (
                <MenuItem key={year} value={year}>
                  {year}
                </MenuItem>
              ))}
            </TextField>
            <Button variant="contained" color="primary" onClick={handleSortByDate} sx={{ ml: 2 }}>
              Sort
            </Button>
          </Box>
        </Box>
      </Box>

      <Box m="20px">
        <Grid container spacing={2}>
          {sortedActivities.map((activity) => (
            <ActivityBox
              key={activity.id}
              activity={activity}
              onEdit={handleUpdate}
              onDelete={handleDelete}
            />
          ))}
        </Grid>
        {viewDialogOpen && <ActivitiesMonitoring />}
        <Dialog open={editDialogOpen} onClose={handleCloseEditForm}>
          <DialogTitle>Edit Activity</DialogTitle>
          <DialogContent>
            {editFormData && (
              <ActivitiesForm
                initialData={editFormData}
                onClose={handleCloseEditForm}
                onEditActivity={handleEditActivity}
                beneficiaries={mockDataBeneficiaries} // Pass beneficiaries prop
              />
            )}
          </DialogContent>
        </Dialog>

        {openActivitiesForm && (
          <ActivitiesForm
            onClose={handleCloseAddForm}
            onAddActivity={handleAddActivity}
            beneficiaries={mockDataBeneficiaries} // Pass beneficiaries prop
          />
        )}
      </Box>
    </>
  );
};

export default Activities;
